import tensorflow
from tensorflow import keras
from keras import Input,Model
from keras.layers import Conv2D, Dense, MaxPooling2D, UpSampling2D
from keras.datasets import mnist
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
encoding_dim = 15
input_img = Input(shape = (784,))
from keras.models import Sequential

#encoder
model = Sequential()
model.add(Conv2D(30,3,activation = 'relu', padding = 'same', input_shape = (28,28,1)))
model.add(MaxPooling2D(2, padding = 'same'))
model.add(Conv2D(15,3,activation = 'relu', padding = 'same'))
model.add(MaxPooling2D(2, padding = 'same'))
model.add(Conv2D(15,3,activation = 'relu', padding = 'same'))
model.add(UpSampling2D(2))
model.add(Conv2D(30,3,activation = 'relu', padding = 'same'))
model.add(UpSampling2D(2))
model.add(Conv2D(1,3, activation = 'sigmoid', padding = 'same'))
model.compile(optimizer = 'adam', loss = 'binary_crossentropy')
model.summary()
(x_train,_),(x_test,_) = mnist.load_data()
x_train = x_train.astype('float32')/255
x_test = x_test.astype('float32')/255
x_train = np.reshape(x_train,(len(x_train),28,28,1))
x_test = np.reshape(x_test,(len(x_test),28,28,1))
model.fit(x_train,x_train,epochs = 15, batch_size = 128, validation_data = (x_test,x_test))
pred = model.predict(x_test)
plt.figure(figsize=(20,4))
for i in range(5):
    ax = plt.subplot(2,5,i+1)
    plt.imshow(x_test[i].reshape(28,28))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
    ax = plt.subplot(2,5,i+1+5)
    plt.imshow(pred[i].reshape(28,28))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
plt.show()
noise_factor = 0.7
x_train_noisy = x_train+noise_factor*np.random.normal(loc = 0.0, scale = 1.0, size = x_train.shape)
x_test_noisy = x_test+noise_factor*np.random.normal(loc = 0.0, scale = 1.0, size = x_test.shape)
x_train_noisy = np.clip(x_train_noisy, 0., 1.)
x_test_noisy = np.clip(x_test_noisy, 0., 1.)
for i in range(1, 5+1):
    ax = plt.subplot(1,5,i)
    plt.imshow(x_train_noisy[i].reshape(28,28))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
plt.show()
model = Sequential()
model.add(Conv2D(35,3, activation = 'relu', padding= 'same', input_shape = (28,28,1)))
model.add(MaxPooling2D(2, padding = 'same'))
model.add(Conv2D(25,3, activation = 'relu', padding = 'same'))
model.add(MaxPooling2D(2, padding  = 'same'))
model.add(Conv2D(25,3, activation = 'relu', padding = 'same'))
model.add(UpSampling2D(2))
model.add(Conv2D(35,3, activation = 'relu', padding = 'same'))
model.add(UpSampling2D(2))
model.add(Conv2D(1,3, activation = 'sigmoid', padding  = 'same'))
model.compile(optimizer = 'adam', loss = 'binary_crossentropy')
model.fit(x_train_noisy,x_train_noisy,epochs = 15,batch_size = 128, validation_data = (x_test_noisy, x_test))
pred = model.predict(x_test_noisy)
plt.figure(figsize = (20,4))
for i in range(5):
    ax = plt.subplot(2,5,i+1)
    plt.imshow(x_test_noisy[i].reshape(28,28))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
    ax = plt.subplot(2,5,i+1+5)
    plt.imshow(pred[i].reshape(28,28))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
plt.show()
